#!/usr/bin/python3

import json
import sys
import os
from urllib import request
import shutil
import subprocess

HOME = os.path.expanduser("~")
STEAM_PATH = HOME + "/.steam/steam/steamapps/common/"
IS_FLATPAK = False

def ask(question: str) -> bool:
    i = input(question + " [Y/N] ")
    return i.lower() in ["yes", "y"]

def steam_source():
    global STEAM_PATH
    global IS_FLATPAK
    steam_system_path = HOME + "/.local/share/Steam/"
    steam_flatpak_path = HOME + "/.var/app/com.valvesoftware.Steam/.local/share/Steam/"
    steam_flatpak_apps_path = steam_flatpak_path + "steamapps/common/"
    if os.path.isdir(steam_flatpak_path) and os.path.isdir(steam_system_path):
        print("You have steam client installed on both system and flatpak!")
        print("Which steam client do you want to use for?")
        confirm = ask("Y - choose for system, N - choose for flatpak")
        if not confirm:
            STEAM_PATH = steam_flatpak_apps_path
            IS_FLATPAK = True
            print("Chosen flatpak!")
        else:
            print("Chosen system!")
    elif not os.path.isdir(steam_system_path):
        STEAM_PATH = steam_flatpak_apps_path
        IS_FLATPAK = True
    elif not os.path.isdir(steam_system_path) and not os.path.isdir(steam_flatpak_path):
        print("You don't have Steam client installed! Please install first.")
        sys.exit(1)


def proton_sources():
    global IS_FLATPAK
    steam_arr = [{"name": l, "path": STEAM_PATH} for l in os.listdir(STEAM_PATH) if "proton" in l.lower()]
    if IS_FLATPAK:
        steam_compartibility_path = HOME + "/.var/app/com.valvesoftware.Steam/.local/share/Steam/compatibilitytools.d/"
    else:
        steam_compartibility_path = HOME + "/.local/share/Steam/compatibilitytools.d/"
    comp_arr = [{"name": l, "path": steam_compartibility_path} for l in os.listdir(steam_compartibility_path) if "proton" in l.lower()]
    return steam_arr + comp_arr


def check_version():
    ver = sys.version_info
    if ver[0] < 3:
        print("Python 2 is not supported.")
        sys.exit(1)
    elif ver[1] < 8:
        print("Python 3.7 and under are not supported.\nIf your distro only offers older version of python please use pyenv")
        sys.exit(1)


def create_config_if_not_exist(j=None):
    config_path = HOME + "/.config/proton-cli"
    if not os.path.isdir(config_path):
        os.makedirs(config_path)
    if not os.path.isfile(config_path + "/config.json"):
        with open(config_path + "/config.json", "w") as f:
            JSON = {
                "RPC": {
                    "enable": False,
                    "path": None
                },
                "PROTON_PATH": None,
                "ARGUMENTS": []
            } if not j else j
            json.dump(JSON, f)
            f.close()


def create_local_if_not_exists():
    local_path = HOME + "/.local/share/proton-cli"
    if not os.path.isdir(local_path):
        os.makedirs(local_path)
    if not os.path.isdir(local_path + "/proton"):
        os.makedirs(local_path + "/proton")


def get_config():
    create_config_if_not_exist()
    with open(HOME + "/.config/proton-cli/config.json") as f:
        j = json.load(f)
        f.close()
        return j


def select_proton_version():
    def write(ver):
        name = ver["name"]
        path = ver["path"]
        path = path + name + "/proton"
        config = get_config()
        config["PROTON_PATH"] = os.path.join(
            HOME, path, ver, "proton")
        with open(HOME + "/.config/proton-cli/config.json", "w") as f:
            json.dump(config, f)
            f.close()

    li = proton_sources()
    if len(li) < 1:
        print("Looks like there's no Proton installed. Please install it first.")
        sys.exit(1)
    elif len(li) == 1:
        i = ask(f"Select {li[0]}?")
        if not i:
            print("Cancelled")
            sys.exit(0)
        else:
            write(li[0])
    else:
        fil = [f"{l['name']} from {l['path']}" for l in li]
        index = 0
        for i in fil:
            print(f"{index} - {fil[index]}")
            index+=1
        print("Detected multiple Proton installers. Type the following index to select Proton you want to use")
        while True:
            try:
                num = input("> ")
                realnum = int(num)
                chosen_proton = li[realnum]
                print(f"You have selected {chosen_proton['name']}!")
                write(chosen_proton)
                break
            except KeyboardInterrupt:
                sys.exit()
            except:
                continue


def enable_RPC():
    create_local_if_not_exists()
    h = ask("Do you want to enable support for Discord Rich Presence?")
    if not h:
        return
    else:
        local_path = HOME + "/.local/share/proton-cli"
        exe = os.path.join(local_path, "winediscordipcbridge.exe")
        print("Downloading winediscordipcbridge.exe...")
        request.urlretrieve(
            "https://github.com/0e4ef622/wine-discord-ipc-bridge/releases/download/v0.0.2/winediscordipcbridge.exe", exe)
        config = get_config()
        config["RPC"] = {
            "enable": True,
            "path": exe
        }
        with open(HOME + "/.config/proton-cli/config.json", "w") as f:
            json.dump(config, f)
            f.close()
        print("Done!")


def get_latest_commit():
    b = subprocess.check_output(["git", "log", "--pretty=format:'%h'", "-1"])
    s = b.decode().replace("'", '')
    return s


def install():
    dest_bins = os.path.join(HOME, ".local", "bin") + "/"
    print(f"Copying binary files to {dest_bins}...")
    bins = os.path.join(os.getcwd(), "bin")
    if not os.path.isdir(bins):
        print("Failed to install: Cannot find bin directory.")
        sys.exit(2)
    for files in os.listdir(bins):
        shutil.copy2(os.path.join(bins, files), dest_bins)
    print("Done!")


def check_path():
    p = os.environ["PATH"].split(os.pathsep)
    if not f"{HOME}/.local/bin" in p:
        confirm = ask(
            f"Do you want to add {HOME}/.local/bin to the PATH env? This will allow to use commands in Terminal.")
        if not confirm:
            print("Ok. Don't forget to set the PATH manually!")
            return
        else:
            os.environ["PATH"] += os.pathsep + f"{HOME}/.local/bin"
            print(f"Added {HOME}/.local/bin to the PATH env!")


def write_to_version():
    local_path = HOME + "/.local/share/proton-cli"
    version = get_latest_commit()
    with open(os.path.join(local_path, "version"), "w") as f:
        f.write(version)
        f.close()


if __name__ == "__main__":
    try:
        arg = sys.argv[1]
    except IndexError:
        arg = ''
    if len(sys.argv[1:]) < 1:
        steam_source()
        check_version()
        select_proton_version()
        enable_RPC()
        install()
        write_to_version()
        check_path()
        print(f"""Sucessfully installed! You can now use the following commands:

proton-cli     - Run Proton in a terminal
proton-config  - Change settings for Proton CLI!

The configuration file can be found in: {HOME}/.config/proton-cli/config.json
The binary files can be found in: {HOME}/.local/bin
The local files can be found in: {HOME}/.local/share/proton-cli

To uninstall this app simply use proton-config uninstall
""")
    elif arg == "copy":
        install()
        write_to_version()
    else:
        print("""
Usage: ./install [SUBCOMMAND]

Avaliable subcommands:
    copy  -  Only copy updated files to ~/.local/bin
""")
